@model ChannelData

@{
    ViewData["Title"] = $"{Model.Channel.DisplayName} - Twitch Overlap";
}

@section metatags
{
    <meta property="og:title" content="@Model.Channel.DisplayName - Twitch Community Overlap">
    <meta property="og:description" content="Chat hopper stats for @Model.Channel.DisplayName. Currently sharing @Model.Channel.Shared.ToString("N0") total viewers. Find out in detail who's viewers are channel hopping to @Model.Channel.DisplayName. The site is open source on GitHub."/>
    <meta property="og:image" content="https://static-cdn.jtvnw.net/jtv_user_pictures/@Model.Channel.Avatar">
}

@section headers
{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/c3@0.7.20/c3.min.css">
    <script src="https://cdn.jsdelivr.net/npm/c3@0.7.20/c3.min.js"></script>
    <script src="https://d3js.org/d3.v5.min.js"></script>
}

<div class="flex items-center pt-4 px-4">
    <a href="https://www.twitch.tv/@Model.Channel.Id" target="_blank" rel="noopener noreferrer">
        <img src="@Model.Channel.Avatar" class="rounded-full" alt="twitch-avatar" onerror="if (this.src !== 'https://i.imgur.com/V2dxUn8.png') this.src = 'https://i.imgur.com/V2dxUn8.png'">
    </a>
    <div class="pl-3 flex flex-col">
        <a class="text-2xl hover:underline hover:text-pink-500" href="https://www.twitch.tv/@Model.Channel.Id" target="_blank" rel="noopener noreferrer">@Model.Channel.DisplayName</a>
        <a class="hover:underline hover:text-pink-500" href="https://www.twitch.tv/directory/game/@Model.Channel.Game" target="_blank" rel="noopener noreferrer">@Model.Channel.Game</a>
    </div>
</div>
<div class="pt-4 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4 px-4 text-center">
    <div class="stats-card">
        <div class="font-medium mb-1">Last Updated</div>
        <div>
            @{
                TimeSpan ts = DateTime.UtcNow - Model.Channel.LastUpdate;
                if (ts.TotalMinutes <= 60)
                {
                    <div title="@Model.Channel.LastUpdate.ToString("u")">@(ts.Minutes == 1 ? $"{ts.Minutes} minute" : $"{ts.Minutes} minutes") ago</div>
                }
                else if (ts.TotalHours <= 24)
                {
                    <div title="@Model.Channel.LastUpdate.ToString("u")">@(ts.Hours == 1 ? $"{ts.Hours} hour" : $"{ts.Hours} hours") ago</div>
                }
                else if (ts.TotalDays <= 7)
                {
                    <div title="@Model.Channel.LastUpdate.ToString("u")">@(ts.Days == 1 ? $"{ts.Days} day" : $"{ts.Days} days") ago</div>
                }
                else
                {
                    <div class="card-text">@Model.Channel.LastUpdate.ToString("u")</div>
                }
            }
        </div>
    </div>
    <div class="stats-card" title="Total viewers in stream, includes embedded viewers">
        <div class="font-medium mb-1">Viewers</div>
        <div>@Model.Channel.Viewers.ToString("N0")</div>
    </div>
    <div class="stats-card" title="Total chatters in stream, excludes embedded viewers">
        <div class="font-medium mb-1">Chatters</div>
        <div>@Model.Channel.Chatters.ToString("N0")</div>
    </div>
    <div class="stats-card" title="Ratio of chatters to viewers, higher is better">
        <div class="font-medium mb-1">Chatter Ratio</div>
        <div>@(((double) Model.Channel.Chatters / Model.Channel.Viewers).ToString("N2"))</div>
    </div>
    <div class="stats-card" title="Percentage of total viewers that are watching another stream">
        <div class="font-medium mb-1">Overlap Percentage</div>
        <div>@(((double) Model.Channel.Shared / Model.Channel.Viewers).ToString("P"))</div>
    </div>
    <div class="stats-card" title="Total number of viewers watching another stream">
        <div class="font-medium mb-1">Total Shared</div>
        <div>@Model.Channel.Shared.ToString("N0")</div>
    </div>
</div>
<div id="chart" class="mt-4 mx-0 md:mx-8 text-black"></div>
<div class="overflow-x-auto">
    <table class="table-fixed mt-4 xl:mx-8">
        <thead class="text-left font-medium">
        <tr class="border-b-2 border-gray-400">
            <td class="w-1/6 px-2 md:px-4 py-2">Channel</td>
            <td class="w-1/6 px-2 md:px-4 py-2">Overlap Probability</td>
            <td class="w-1/6 px-2 md:px-4 py-2">Overlap Chatters</td>
            <td class="w-1/6 px-2 md:px-4 py-2">% of Total Chatters</td>
            <td class="w-1/3 px-2 md:px-4 py-2">Playing</td>
        </tr>
        </thead>
        <tbody>
        @foreach ((string channel, Data data) in Model.Data)
        {
            <tr class="border-b border-gray-300">
                <td class="table-channel-col">
                    <a asp-controller="Home" asp-action="Channel" asp-route-name=@channel>@channel</a>
                </td>
                <td class="table-stats-col">@(((double) data.Shared / Model.Channel.Shared).ToString("P"))</td>
                <td class="table-stats-col">@(data.Shared.ToString("N0"))</td>
                <td class="table-stats-col">@(((double) data.Shared / Model.Channel.Chatters).ToString("P"))</td>
                <td class="table-stats-col hover:underline hover:text-pink-500 truncate">
                    <a href="https://www.twitch.tv/directory/game/@data.Game" target="_blank" rel="noopener noreferrer">@data.Game</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<style>
    .c3-line {
        stroke-width: 2px;
    }
</style>

<script>
const chartStyle = document.createElement("style");

window.addEventListener("load", () => {
    const root = document.querySelector("html");

    if (root.classList.contains("dark")) {
        chartStyle.sheet.insertRule(".c3-legend-item, .c3-axis-y, .c3-axis-x { fill: #FFFFFF }", 0);
    } else {
        chartStyle.sheet.insertRule(".c3-legend-item, .c3-axis-y, .c3-axis-x { fill: #000000 }", 0);
    }
});

document.head.appendChild(chartStyle);
document.getElementById("toggle-dark").addEventListener("click", () => {
    const root = document.querySelector("html");

    if (chartStyle.sheet.cssRules.length !== 0) {
        chartStyle.sheet.deleteRule(0);
    }
    if (root.classList.contains("dark")) {
        chartStyle.sheet.insertRule(".c3-legend-item, .c3-axis-y, .c3-axis-x { fill: #FFFFFF }", 0);
    } else {
        chartStyle.sheet.insertRule(".c3-legend-item, .c3-axis-y, .c3-axis-x { fill: #000000 }", 0);
    }
});

(function () {
    const arr = [@(Model.History != null ? string.Join(',', Model.History) : null)];
    if (arr.length === 0) {
    	document.getElementById("channel-trend-chart").outerHTML = "";
    	return;
    }
    
    let data = [];
    let timeSet = ["date"];
    for(let i = 0; i < arr.length; i++) {
        let date;
        // temp cus i messed up db
        if (arr[i] <= 2000000000) {
            date = new Date(arr[i] * 1000);
        } else {
            date = new Date(arr[i]);
        }
        const month = new Intl.DateTimeFormat("default", { month: "short" }).format(date);
        const day = new Intl.DateTimeFormat("default", { day: "2-digit" }).format(date);
        const time = new Intl.DateTimeFormat("default", { hour: "numeric", minute: "numeric", hour12: false }).format(date);
        const dt = `${month} ${day} ${time}`;
        timeSet.push(dt);
    }
    data.push(timeSet);
    
    const stringToRGB = function(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        let colour = "#";
        for (let i = 0; i < 3; i++) {
            let value = (hash >> (i * 8)) & 0xFF;
            colour += ("00" + value.toString(16)).substr(-2);
        }
        return colour;
    };
    
    const rawdata = @Html.Raw(Json.Serialize(Model.OverlapPoints));
    const channelColors = {};
    for (const channel in rawdata) {
        channelColors[channel] = stringToRGB(channel);
        data.push([channel, ...rawdata[channel]]);
    }
    
    c3.generate({
        bindto: "#chart",
        data: {
            columns: data,
            x: "date",
            colors: channelColors
        },
        axis: {
            x: {
                type: "category",
                tick: {
                    culling: {
                        max: 18
                    },
                    rotate: 20,
                    multiline: false
                }
            }
        },
        size: {
          height: 480
        },
        padding: {
          left: 40,
          right: 20
        }
    });
})();
</script>