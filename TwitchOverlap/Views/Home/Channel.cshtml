@using System.Globalization
@model ChannelData

@{
    ViewData["Title"] = $"{Model.Channel.DisplayName} - Twitch Overlap";
}

@section metatags
{
    <meta property="og:title" content="@Model.Channel.DisplayName - Twitch Community Overlap">
    <meta property="og:description" content="Chat hopper stats for @Model.Channel.DisplayName. Currently sharing @Model.Channel.Shared.ToString("N0") total viewers. Find out in detail who's viewers are channel hopping to @Model.Channel.DisplayName. The site is open source on GitHub."/>
    <meta property="og:image" content="https://static-cdn.jtvnw.net/jtv_user_pictures/@Model.Channel.Avatar">
}

@section headers
{
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.1.1/dist/echarts.min.js" integrity="sha256-Yhe8c0oOs2dPYVQKLAi1aBB9uhr7yMmh67ukoWBqDuU=" crossorigin="anonymous"></script>
}

@{
    var numberInfo = new NumberFormatInfo {PercentPositivePattern = 1};
}

<div class="flex items-center pt-4 px-4">
    <a href="https://www.twitch.tv/@Model.Channel.Id" target="_blank" rel="noopener noreferrer">
        <img src="https://static-cdn.jtvnw.net/jtv_user_pictures/@Model.Channel.Avatar" class="rounded-full" alt="twitch-avatar" onerror="if (this.src !== 'https://i.imgur.com/V2dxUn8.png') this.src = 'https://i.imgur.com/V2dxUn8.png'">
    </a>
    <div class="pl-3 flex flex-col">
        <a class="text-2xl hover:underline hover:text-pink-500" href="https://www.twitch.tv/@Model.Channel.Id" target="_blank" rel="noopener noreferrer">@Model.Channel.DisplayName</a>
        <a class="hover:underline hover:text-pink-500" href="https://www.twitch.tv/directory/game/@Model.Channel.Game" target="_blank" rel="noopener noreferrer">@Model.Channel.Game</a>
    </div>
</div>
<div class="pt-4 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4 px-4 text-center">
    <div class="stats-card">
        <div class="font-medium mb-1">Last Updated</div>
        <div>
            @{
                TimeSpan ts = DateTime.UtcNow - Model.Channel.LastUpdate;
                if (ts.TotalMinutes <= 60)
                {
                    <div title="@Model.Channel.LastUpdate.ToString("u")">@(ts.Minutes == 1 ? $"{ts.Minutes} minute" : $"{ts.Minutes} minutes") ago</div>
                }
                else if (ts.TotalHours <= 24)
                {
                    <div title="@Model.Channel.LastUpdate.ToString("u")">@(ts.Hours == 1 ? $"{ts.Hours} hour" : $"{ts.Hours} hours") ago</div>
                }
                else if (ts.TotalDays <= 7)
                {
                    <div title="@Model.Channel.LastUpdate.ToString("u")">@(ts.Days == 1 ? $"{ts.Days} day" : $"{ts.Days} days") ago</div>
                }
                else
                {
                    <div class="card-text">@Model.Channel.LastUpdate.ToString("u")</div>
                }
            }
        </div>
    </div>
    <div class="stats-card" title="Total viewers in stream, includes embedded viewers">
        <div class="font-medium mb-1">Viewers</div>
        <div>@Model.Channel.Viewers.ToString("N0")</div>
    </div>
    <div class="stats-card" title="Total chatters in stream, excludes embedded viewers">
        <div class="font-medium mb-1">Chatters</div>
        <div>@Model.Channel.Chatters.ToString("N0")</div>
    </div>
    <div class="stats-card" title="Ratio of chatters to viewers, higher is better">
        <div class="font-medium mb-1">Chatter Ratio</div>
        <div>@(((double) Model.Channel.Chatters / Model.Channel.Viewers).ToString("N2"))</div>
    </div>
    <div class="stats-card" title="Percentage of total viewers that are watching another stream">
        <div class="font-medium mb-1">Overlap Percentage</div>
        <div>@(((double) Model.Channel.Shared / Model.Channel.Viewers).ToString("P", numberInfo))</div>
    </div>
    <div class="stats-card" title="Total number of viewers watching another stream">
        <div class="font-medium mb-1">Total Shared</div>
        <div>@Model.Channel.Shared.ToString("N0")</div>
    </div>
</div>
<div id="chart" class="mt-4" style="width: 100%;min-height:480px;"></div>
<div class="overflow-x-auto">
    <table class="table-fixed mt-4 xl:mx-8">
        <thead class="text-left font-medium">
        <tr class="border-b-2 border-gray-400">
            <td class="w-1/6 px-2 md:px-4 py-2" title="Channel">Channel</td>
            <td class="w-1/6 px-2 md:px-4 py-2" title="Probability of where a shared chatter is from">Overlap Probability</td>
            <td class="w-1/6 px-2 md:px-4 py-2" title="Total number of overlap from a channel">Overlap Chatters</td>
            <td class="w-1/6 px-2 md:px-4 py-2" title="Percentage of total chatters">% of Total Chatters</td>
            <td class="w-1/3 px-2 md:px-4 py-2" title="Current category">Playing</td>
        </tr>
        </thead>
        <tbody>
        @foreach ((string channel, Data data) in Model.Data)
        {
            <tr class="border-b border-gray-300">
                <td class="table-channel-col">
                    <a asp-controller="Home" asp-action="Channel" asp-route-name=@channel>@channel</a>
                </td>
                <td class="table-stats-col">@(((double) data.Shared / Model.Channel.Shared).ToString("P", numberInfo))</td>
                <td class="table-stats-col">@(data.Shared.ToString("N0"))</td>
                <td class="table-stats-col">@(((double) data.Shared / Model.Channel.Chatters).ToString("P", numberInfo))</td>
                <td class="table-stats-col hover:underline hover:text-pink-500 truncate">
                    <a href="https://www.twitch.tv/directory/game/@data.Game" target="_blank" rel="noopener noreferrer">@data.Game</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<script>
const myChart = echarts.init(document.getElementById("chart"));
const root = document.querySelector("html");
if (root.classList.contains("dark")) {
    myChart.showLoading({textColor: "#fff",maskColor: "rgba(255, 255, 255, 0)"});
} else {
    myChart.showLoading({maskColor: "rgba(255, 255, 255, 0)"});    
}
let legendData;

const changeTheme = () => {
    if (root.classList.contains("dark")) {
        myChart.setOption({
            legend: {
                textStyle: {
                    color: "#fff"
                },
                inactiveColor: "#5b5b5b",
                type: "scroll",
                pageTextStyle: {
                    color: "#fff"
                },
                pageIconColor: "#aaa",
                pageIconInactiveColor: "#2f4554",
                data: legendData
            },
            textStyle: {
                color: "#fff"
            }
        });
    } else {
        myChart.setOption({
            legend: {
                textStyle: {
                    color: "#000"
                },
                inactiveColor: "#d3d3d3",
                type: "scroll",
                pageTextStyle: {
                    color: "#000"
                },
                pageIconColor: "#2f4554",
                pageIconInactiveColor: "#aaa",
                data: legendData
            },
            textStyle: {
                color: "#000"
            }
        });
    }
};

window.addEventListener("load", () => {
    changeTheme();
});
document.getElementById("toggle-dark").addEventListener("click", () => {
    changeTheme();
});
window.addEventListener("resize", () => {
    myChart.resize();
});

(async function() {
    async function fetchData() {
        try {
            const response = await fetch(`/api/history${window.location.pathname}`);
            return response.json();
        } catch (error) {
            console.error(error);
            return null;
        }
    }

    const data = await fetchData();
    if (data == null || data.channels.length === 0) {
        return;
    }
    
    myChart.hideLoading();

    const stringToRGB = function(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        let colour = "#";
        for (let i = 0; i < 3; i++) {
            let value = (hash >> (i * 8)) & 0xFF;
            colour += ("00" + value.toString(16)).substr(-2);
        }
        return colour;
    };

    const lines = [];
    for (let i = 1; i < data.channels.length; i++) {
        const color = stringToRGB(data.channels[i]);
        lines.push({
            type: "line",
            itemStyle: {
                color: color
            },
            lineStyle: {
                color: color
            },
            emphasis: {
                focus: "series"
            },
            animationDuration: 500
        });
    }
    legendData = data.channels.slice(1).sort();
    let option = {
        legend: {
            data: legendData
        },
        grid: {
            left: "7%",
            right: "5%"
        },
        dataZoom: [{
            type: 'slider',
            startValue: data.history.length > 24 ? data.history.length - 24 : 0,
            end: 100,
            rangeMode: ["value", "percent"]
        }],
        tooltip: {
            trigger: "axis",
            formatter: function(params) {
                let output = "<div class=\"mb-2\"><b>" + params[0].name + "</b></div>";
                const values = Object.entries(params[0].value).filter(x => x[0] !== "timestamp");
                for (let i = 0; i < values.length; i++) {
                    let param = params.find(x => x.seriesName === values[i][0]);
                    if (param == null) {
                        continue;
                    }
                    output += "<div class=\"flex justify-between\"><div class=\"mr-4\">" + param.marker + values[i][0] + "</div><div class=\"font-bold\">" + values[i][1].toLocaleString() + "</div></div>";
                }
                return output;
            }
        },
        dataset: {
            dimensions: data.channels,
            source: data.history.reverse()
        },
        xAxis: {
            type: "category"
        },
        yAxis: {
            type: "value",
            splitLine: {
                show: false
            },
            axisLine: {
                show: true
            },
            axisTick: {
                show: true
            }
        },
        series: lines,
        media: [{
            query: {
                maxWidth: 600
            },
            option: {
                grid: {
                    left: "12%",
                    right: "6%"
                },
            }
        }, ]
    };

    option && myChart.setOption(option);
})();
</script>