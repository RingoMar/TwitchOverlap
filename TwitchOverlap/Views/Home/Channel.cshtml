@using System.Globalization
@model ChannelData

@{
    ViewData["Title"] = $"{Model.Channel.DisplayName} - Twitch Overlap";
}

@section metatags
{
    <meta property="og:title" content="@Model.Channel.DisplayName - Twitch Community Overlap">
    <meta property="og:description" content="Chat hopper stats for @Model.Channel.DisplayName. Currently sharing @Model.Channel.Shared.ToString("N0") total viewers. Find out in detail which channels @Model.Channel.DisplayName's viewers are watching, or who's viewers are watching to @Model.Channel.DisplayName. The site is open source on GitHub."/>
    <meta property="og:image" content="https://static-cdn.jtvnw.net/jtv_user_pictures/@Model.Channel.Avatar">
}

@section headers
{
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.1.1/dist/echarts.min.js" integrity="sha256-Yhe8c0oOs2dPYVQKLAi1aBB9uhr7yMmh67ukoWBqDuU=" crossorigin="anonymous"></script>
}

@{
    var numberInfo = new NumberFormatInfo {PercentPositivePattern = 1};
}

<div class="container w-full md:max-w-5xl xl:max-w-7xl mx-auto tracking-tight mt-16 mb-20">
<div class="block md:flex justify-between">
    <div class="flex items-center pt-4 px-4">
        <a href="https://www.twitch.tv/@Model.Channel.LoginName" target="_blank" rel="noopener noreferrer">
            <img src="https://static-cdn.jtvnw.net/jtv_user_pictures/@Model.Channel.Avatar" class="rounded-full" alt="twitch-avatar" onerror="if (this.src !== 'https://i.imgur.com/V2dxUn8.png') this.src = 'https://i.imgur.com/V2dxUn8.png'">
        </a>
        <div class="pl-3 flex flex-col">
            <a class="text-2xl hover:underline hover:text-pink-500" href="https://www.twitch.tv/@Model.Channel.LoginName" target="_blank" rel="noopener noreferrer">@Model.Channel.DisplayName</a>
            <a class="hover:underline hover:text-pink-500" href="https://www.twitch.tv/directory/game/@Model.Channel.Game" target="_blank" rel="noopener noreferrer">@Model.Channel.Game</a>
        </div>
    </div>
    <div class="mt-4 ml-4 mr-4 md:mt-0 md:ml-0 flex items-end">
        <a class="rounded border border-gray-300 dark:border-gray-800 flex flex-col py-2 shadow-md px-2 @(ChannelData.Type == AggregateDays.Default ? "bg-pink-500 hover:bg-pink-600 dark:bg-pink-800 dark:hover:bg-pink-700" : "dark:bg-gray-700 hover:text-pink-500")"
           href="/@Model.Channel.LoginName">
            30 min
        </a>
        <a class="rounded border border-gray-300 dark:border-gray-800 flex flex-col py-2 shadow-md px-2 @(ChannelData.Type == AggregateDays.OneDay ? "bg-pink-500 hover:bg-pink-600 dark:bg-pink-800 dark:hover:bg-pink-700" : "dark:bg-gray-700 hover:text-pink-500")"
           href="/@Model.Channel.LoginName/1">
            1 day
        </a>
        <a class="rounded border border-gray-300 dark:border-gray-800 flex flex-col py-2 shadow-md px-2 @(ChannelData.Type == AggregateDays.ThreeDays ? "bg-pink-500 hover:bg-pink-600 dark:bg-pink-800 dark:hover:bg-pink-700" : "dark:bg-gray-700 hover:text-pink-500")"
           href="/@Model.Channel.LoginName/3">
            3 days
        </a>
        <a class="rounded border border-gray-300 dark:border-gray-800 flex flex-col py-2 shadow-md px-2 @(ChannelData.Type == AggregateDays.SevenDays ? "bg-pink-500 hover:bg-pink-600 dark:bg-pink-800 dark:hover:bg-pink-700" : "dark:bg-gray-700 hover:text-pink-500")"
           href="/@Model.Channel.LoginName/7">
            7 days
        </a>
    </div>
</div>
<div class="pt-4 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4 px-4 text-center">
    <div class="stats-card">
        <div class="font-medium mb-1">Last Updated</div>
        <div>
            @{
                TimeSpan ts = DateTime.UtcNow - Model.Channel.LastUpdate;
                if (ts.TotalMinutes <= 60)
                {
                    <div title="@Model.Channel.LastUpdate.ToString("u")">@(ts.Minutes == 1 ? $"{ts.Minutes} minute" : $"{ts.Minutes} minutes") ago</div>
                }
                else if (ts.TotalHours <= 24)
                {
                    <div title="@Model.Channel.LastUpdate.ToString("u")">@(ts.Hours == 1 ? $"{ts.Hours} hour" : $"{ts.Hours} hours") ago</div>
                }
                else if (ts.TotalDays <= 7)
                {
                    <div title="@Model.Channel.LastUpdate.ToString("u")">@(ts.Days == 1 ? $"{ts.Days} day" : $"{ts.Days} days") ago</div>
                }
                else
                {
                    <div class="card-text">@Model.Channel.LastUpdate.ToString("u")</div>
                }
            }
        </div>
    </div>
    <div class="stats-card" title="Total viewers in stream, includes embedded viewers">
        <div class="font-medium mb-1">Viewers</div>
        @{
            if (Model.Channel.History.Count == 2)
            {
                <div class="flex items-center justify-center">
                    <div title="Total viewers in channel">@Model.Channel.History[0].Viewers.ToString("N0")</div>
                    @{
                        double change = (double) (Model.Channel.History[0].Viewers - Model.Channel.History[1].Viewers) / Model.Channel.History[1].Viewers;
                        if (change >= 0)
                        {
                            <div title="Change in viewers since last update" class="pl-1 text-xs text-green-500">+@change.ToString("P", numberInfo)</div>
                        }
                        else
                        {
                            <div title="Change in viewers since last update" class="pl-1 text-xs text-red-500">@change.ToString("P", numberInfo)</div>
                        }
                    }
                </div>
            }
            else
            {
                <div title="Total viewers in channel">@Model.Channel.History[0].Viewers.ToString("N0")</div>
            }
        }
    </div>
    <div class="stats-card" title="Total chatters in stream, excludes embedded viewers">
        <div class="font-medium mb-1">Chatters</div>
        @{
            if (Model.Channel.History.Count == 2)
            {
                <div class="flex items-center justify-center">
                    <div class="Total chatters inline-flex channel">@Model.Channel.History[0].Chatters.ToString("N0")</div>
                    @{
                        double change = (double) (Model.Channel.History[0].Chatters - Model.Channel.History[1].Chatters) / Model.Channel.History[1].Chatters;
                        if (change >= 0)
                        {
                            <div title="Change in chatters since last update" class="pl-1 text-xs text-green-500">+@change.ToString("P", numberInfo)</div>
                        }
                        else
                        {
                            <div title="Change in chatters since last update" class="pl-1 text-xs text-red-500">@change.ToString("P", numberInfo)</div>
                        }
                    }
                </div>
            }
            else
            {
                <div class="Total chatters inline-flex channel">@Model.Channel.History[0].Chatters.ToString("N0")</div>
            }
        }
    </div>
    <div class="stats-card" title="Ratio of chatters to viewers, higher is better">
        <div class="font-medium mb-1">Chatter Ratio</div>
        <div>@(((double) Model.Channel.History[0].Chatters / Model.Channel.History[0].Viewers).ToString("N2"))</div>
    </div>
    <div class="stats-card" title="Percentage of total viewers that are watching another stream">
        <div class="font-medium mb-1">Overlap Percentage</div>
        <div>@(((double) Model.Channel.Shared / Model.Channel.Viewers).ToString("P", numberInfo))</div>
    </div>
    <div class="stats-card" title="Total number of viewers watching another stream">
        <div class="font-medium mb-1">Total Shared</div>
        @{
            if (Model.Channel.History.Count == 2)
            {
                <div class="flex items-center justify-center">
                    <div title="Total shared viewers">@Model.Channel.History[0].Shared.ToString("N0")</div>
                    @{
                        double change = (double) (Model.Channel.History[0].Shared - Model.Channel.History[1].Shared) / Model.Channel.History[1].Shared;
                        if (change >= 0)
                        {
                            <div title="Change in shared chatters since last update" class="pl-1 text-xs text-green-500">+@change.ToString("P", numberInfo)</div>
                        }
                        else
                        {
                            <div title="Change in shared chatters since last update" class="pl-1 text-xs text-red-500">@change.ToString("P", numberInfo)</div>
                        }
                    }
                </div>
            }
            else
            {
                <div title="Total shared viewers">@Model.Channel.History[0].Shared.ToString("N0")</div>
            }
        }
    </div>
</div>
<div id="chart" class="mt-4" style="width: 100%;min-height:480px;"></div>
<div class="overflow-x-auto">
    <table class="table-fixed mt-4 mx-auto">
        <thead class="text-left font-medium">
        <tr class="border-b-2 border-gray-400">
            <td class="px-2 md:px-4 py-2" title="Change compared to last overlap">Δ</td>
            <td class="w-1/6 px-2 md:px-4 py-2" title="Channel">Channel</td>
            <td class="w-1/6 px-2 md:px-4 py-2" title="Probability of where a shared chatter is from">Overlap Probability</td>
            <td class="w-1/6 px-2 md:px-4 py-2" title="Total number of overlap from a channel">Overlap Chatters</td>
            <td class="w-1/6 px-2 md:px-4 py-2" title="Percentage of total chatters">% of Total Chatters</td>
            <td class="w-1/3 px-2 md:px-4 py-2" title="Current category">Playing</td>
        </tr>
        </thead>
        <tbody>
        @foreach (Data data in Model.Data)
        {
            <tr class="border-b border-gray-300">
                @if (data.Change == null)
                {
                    <td class="text-blue-500" title="new overlap">
                        <i class="fas fa-plus pl-1"></i>
                    </td>
                }
                else if (data.Change.Value == 0)
                {
                    <td title="no change in position">
                        <i class="fas fa-minus pl-1"></i>
                    </td>
                }
                else if (data.Change.Value > 0)
                {
                    <td class="text-green-500 whitespace-nowrap" title="increased position">
                        <i class="fas fa-chevron-up pl-1"></i> @data.Change.Value
                    </td>
                }
                else
                {
                    <td class="text-red-500 whitespace-nowrap" title="decreased position">
                        <i class="fas fa-chevron-down pl-1"></i> @Math.Abs(data.Change.Value)
                    </td>
                }
                <td class="table-channel-col">
                    <a asp-controller="Home" asp-action="Channel" asp-route-name=@data.LoginName>@data.DisplayName</a>
                </td>
                <td class="table-stats-col">@(((double) data.Shared / Model.Channel.Shared).ToString("P", numberInfo))</td>
                <td class="table-stats-col">@(data.Shared.ToString("N0"))</td>
                <td class="table-stats-col">@(((double) data.Shared / Model.Channel.Chatters).ToString("P", numberInfo))</td>
                <td class="table-stats-col hover:underline hover:text-pink-500 truncate">
                    <a href="https://www.twitch.tv/directory/game/@data.Game" target="_blank" rel="noopener noreferrer">@data.Game</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>
</div>

<script src="~/js/channel.js" asp-append-version="true"></script>