@{
    ViewData["Title"] = "Twitch Atlas - June 1st > June 15th - Twitch Overlap";
}

@section metatags
{
    <meta property="og:title" content="Twitch Atlas - Twitch Community Map">
    <meta property="og:description" content="Map of the different communities across Twitch. A network graph showing the overlap in communities of the top channels on Twitch. Inspired by /u/Kgersh's Twitch Atlas on Reddit. The site is open source on GitHub."/>
    <meta property="og:image" content="https://cdn.discordapp.com/attachments/220571291617329154/854254051524083742/twitch-community-graph-3.png">
}

@section headers
{
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.1.1/dist/echarts.min.js" integrity="sha256-Yhe8c0oOs2dPYVQKLAi1aBB9uhr7yMmh67ukoWBqDuU=" crossorigin="anonymous"></script>
}

<div class="bg-gray-300 dark:bg-gray-800">
    <div id="main" style="width:100vw; height:100vh;"></div>
</div>
<script>
    const chartDom = document.getElementById("main");
    const myChart = echarts.init(chartDom);
    window.addEventListener("resize", () => {
        myChart.resize();
    });
    (async function () {
        async function fetchData() {
            try {
                const response = await fetch("data/@(DateTime.UtcNow.ToString("M_yyyy"))_graph.json");
                return response.json();
            } catch (error) {
                console.error(error);
                return null;
            }
        }

        const data = await fetchData();
        if (data == null){
            return;
        }
        
        const option = {
            textStyle: {
                fontFamily: "Inter"
            },
            series: [
                {
                    name: 'test',
                    type: 'graph',
                    layout: 'force',
                    roam: true,
                    data: data.nodes.map(x => ({
                        id: x.id,
                        name: x.name,
                        symbolSize: x.size,
                        itemStyle: {
                            color: x.color,
                            borderColor: "#a9a9a9",
                            borderWidth: 2
                        },
                        label: {
                            color: "#fff",
                            fontSize: x.size / 5 >= 12 ?  x.size / 5 : 12 
                        }
                    })),
                    links: data.edges.map(x => ({
                        source: x.source,
                        target: x.target,
                        lineStyle: {
                            color: data.nodes.find(y => y.id === x.source).color,
                        }
                    })),
                    categories: data.category,
                    label: {
                        show: true,
                        position: "inside"
                    },
                    labelLayout: {
                        hideOverlap: true
                    },
                    lineStyle: {
                        curveness: 0.3,
                        opacity: 0.2
                    },
                    force: {
                        repulsion: 5000,
                        // layoutAnimation: false,
                        friction: 0.1,
                        gravity: 0.05
                    },
                    silent: true
                }
            ]
        };
        myChart.setOption(option);
    })();
</script>
