@using System.Globalization
@model ChannelAggregateData

@{
    ViewData["Title"] = $"{Model.Channel.DisplayName} - {(int)Model.Type} Day Aggregate - Twitch Overlap";
}

@section metatags
{
    <meta property="og:title" content="@Model.Channel.DisplayName - Twitch Community Overlap">
    <meta property="og:description" content="@((int)Model.Type) day aggregate overlap stats for @Model.Channel.DisplayName. Currently sharing @Model.Channel.Shared.ToString("N0") total viewers. Find out in detail which channels @Model.Channel.DisplayName's viewers are watching, or who's viewers are watching to @Model.Channel.DisplayName. The site is open source on GitHub."/>
    <meta property="og:image" content="https://static-cdn.jtvnw.net/jtv_user_pictures/@Model.Channel.Avatar">
}

@section headers
{
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.1.1/dist/echarts.min.js" integrity="sha256-Yhe8c0oOs2dPYVQKLAi1aBB9uhr7yMmh67ukoWBqDuU=" crossorigin="anonymous"></script>
}

@{
    var numberInfo = new NumberFormatInfo { PercentPositivePattern = 1 };
}

<div class="container w-full md:max-w-5xl xl:max-w-7xl mx-auto tracking-tight mt-16 mb-20">
    <div class="block md:flex justify-between">
        <div class="flex items-center pt-4 px-4">
            <a href="https://www.twitch.tv/@Model.Channel.LoginName" target="_blank" rel="noopener noreferrer">
                <img src="https://static-cdn.jtvnw.net/jtv_user_pictures/@Model.Channel.Avatar" class="rounded-full" alt="twitch-avatar" onerror="if (this.src !== 'https://i.imgur.com/V2dxUn8.png') this.src = 'https://i.imgur.com/V2dxUn8.png'">
            </a>
            <div class="pl-3 flex flex-col">
                <a class="text-2xl hover:underline hover:text-pink-500" href="https://www.twitch.tv/@Model.Channel.LoginName" target="_blank" rel="noopener noreferrer">@Model.Channel.DisplayName</a>
                <a class="hover:underline hover:text-pink-500" href="https://www.twitch.tv/directory/game/@Model.Channel.Game" target="_blank" rel="noopener noreferrer">@Model.Channel.Game</a>
            </div>
        </div>
        <div class="mt-4 ml-4 mr-4 md:mt-0 md:ml-0 flex items-end">
            <a class="rounded border border-gray-300 dark:border-gray-800 flex flex-col py-2 shadow-md px-2 @(Model.Type == AggregateDays.Default ? "bg-pink-500 hover:bg-pink-600 dark:bg-pink-800 dark:hover:bg-pink-700" : "dark:bg-gray-700 hover:text-pink-500")"
               title="30 min stats"
               href="/@Model.Channel.LoginName">
                30 min
            </a>
            <a class="rounded border border-gray-300 dark:border-gray-800 flex flex-col py-2 shadow-md px-2 @(Model.Type == AggregateDays.OneDay ? "bg-pink-500 hover:bg-pink-600 dark:bg-pink-800 dark:hover:bg-pink-700" : "dark:bg-gray-700 hover:text-pink-500")"
               title="1 day rolling aggregate"
               href="/@Model.Channel.LoginName/1">
                1 day
            </a>
            <a class="rounded border border-gray-300 dark:border-gray-800 flex flex-col py-2 shadow-md px-2 @(Model.Type == AggregateDays.ThreeDays ? "bg-pink-500 hover:bg-pink-600 dark:bg-pink-800 dark:hover:bg-pink-700" : "dark:bg-gray-700 hover:text-pink-500")"
               title="3 day rolling aggregate"
               href="/@Model.Channel.LoginName/3">
                3 days
            </a>
            <a class="rounded border border-gray-300 dark:border-gray-800 flex flex-col py-2 shadow-md px-2 @(Model.Type == AggregateDays.SevenDays ? "bg-pink-500 hover:bg-pink-600 dark:bg-pink-800 dark:hover:bg-pink-700" : "dark:bg-gray-700 hover:text-pink-500")"
               title="7 day rolling aggregate"
               href="/@Model.Channel.LoginName/7">
                7 days
            </a>
        </div>
    </div>
    <div class="pt-4 grid grid-cols-2 md:grid-cols-4 gap-4 px-4 text-center">
        <div class="stats-card">
            <div class="font-medium mb-1">Last Updated</div>
            <div>
                @{
                    TimeSpan ts = DateTime.UtcNow - Model.Date;
                    if (ts.Days >= 1)
                    {
                        <div title="@Model.Date.ToString("yyyy-MM-dd")">Today</div>
                    }
                    else if (ts.Days == 2)
                    {
                        <div title="@Model.Date.ToString("yyyy-MM-dd")">Yesterday</div>
                    }
                    else
                    {
                        <div title="@Model.Date.ToString("yyyy-MM-dd")">@ts.Days days ago</div>
                    }
                }
            </div>
        </div>
        <div class="stats-card" title="Total unique chatters present in the channel in the time span">
            <div class="font-medium mb-1">Total Unique Chatters</div>
            @{
                if (Model.Change.TotalChatterChange.HasValue && Model.Change.TotalChatterPercentageChange.HasValue)
                {
                    <div class="flex items-center justify-center">
                        <div>@Model.ChannelTotalUnique.ToString("N0")</div>
                        @{
                            if (Model.Change.TotalChatterChange.Value >= 0)
                            {
                                <div class="pl-1 text-green-500 text-xs" title="+@Model.Change.TotalChatterChange.Value since last update">+@Model.Change.TotalChatterPercentageChange.Value.ToString("P", numberInfo)</div>
                            }
                            else
                            {
                                <div class="pl-1 text-red-500 text-xs" title="@Model.Change.TotalChatterChange.Value since last update">@Model.Change.TotalChatterPercentageChange.Value.ToString("P", numberInfo)</div>
                            }
                        }
                    </div>
                }
                else
                {
                    <div>@Model.ChannelTotalUnique.ToString("N0")</div>
                }
            }
        </div>
        <div class="stats-card" title="Percentage of total chatters that was present in another stream">
            <div class="font-medium mb-1">Overlap Percentage</div>
            @{
                if (Model.Change.OverlapPercentChange.HasValue)
                {
                    <div class="flex items-center justify-center">
                        <div>@(((double)Model.ChannelTotalOverlap / Model.ChannelTotalUnique).ToString("P", numberInfo))</div>
                        @{
                            if (Model.Change.OverlapPercentChange.Value >= 0)
                            {
                                <div class="pl-1 text-green-500 text-xs">+@Model.Change.OverlapPercentChange.Value.ToString("P", numberInfo)</div>
                            }
                            else
                            {
                                <div class="pl-1 text-red-500 text-xs">@Model.Change.OverlapPercentChange.Value.ToString("P", numberInfo)</div>
                            }
                        }
                    </div>
                }
                else
                {
                    <div>@(((double)Model.ChannelTotalOverlap / Model.ChannelTotalUnique).ToString("P", numberInfo))</div>
                }
            }
        </div>
        <div class="stats-card" title="Total number of chatters that was present in another stream">
            <div class="font-medium mb-1">Total Shared</div>
            @{
                if (Model.Change.TotalOverlapChange.HasValue && Model.Change.TotalOverlapPercentageChange.HasValue)
                {
                    <div class="flex items-center justify-center">
                        <div>@Model.ChannelTotalOverlap.ToString("N0")</div>
                        @{
                            if (Model.Change.TotalOverlapChange.Value >= 0)
                            {
                                <div class="pl-1 text-green-500 text-xs" title="+@Model.Change.TotalOverlapChange.Value since last update">+@Model.Change.TotalOverlapPercentageChange.Value.ToString("P", numberInfo)</div>
                            }
                            else
                            {
                                <div class="pl-1 text-red-500 text-xs" title="@Model.Change.TotalOverlapChange.Value since last update">@Model.Change.TotalOverlapPercentageChange.Value.ToString("P", numberInfo)</div>
                            }
                        }
                    </div>
                }
                else
                {
                    <div>@Model.ChannelTotalOverlap.ToString("N0")</div>
                }
            }
        </div>
    </div>
    <div id="chart" class="mt-4" style="width: 100%;min-height:480px;"></div>
    <div class="overflow-x-auto">
        <table class="table-fixed mt-4 mx-auto">
            <thead class="text-left font-medium">
            <tr class="border-b-2 border-gray-400">
                <td class="w-1/12 px-2 md:px-4 py-2" title="Change compared to last overlap">Δ</td>
                <td class="w-1/6 px-2 md:px-4 py-2" title="Channel">Channel</td>
                <td class="w-1/6 px-2 md:px-4 py-2" title="Probability of where a shared chatter is from">Overlap Probability</td>
                <td class="w-1/6 px-2 md:px-4 py-2" title="Total number of overlap from a channel">Overlap Chatters</td>
                <td class="w-1/6 px-2 md:px-4 py-2" title="Percentage of total chatters">% of Total Chatters</td>
            </tr>
            </thead>
            <tbody>
            @foreach (Data data in Model.Data)
            {
                <tr class="border-b border-gray-300">
                    @if (data.Change == null)
                    {
                        <td class="text-blue-500" title="new overlap">
                            <i class="fas fa-plus pl-1"></i>
                        </td>
                    }
                    else if (data.Change.Value == 0)
                    {
                        <td title="no change in position">
                            <i class="fas fa-minus pl-1"></i>
                        </td>
                    }
                    else if (data.Change.Value > 0)
                    {
                        <td class="text-green-500 whitespace-nowrap" title="increased position">
                            <i class="fas fa-chevron-up pl-1"></i> @data.Change.Value
                        </td>
                    }
                    else
                    {
                        <td class="text-red-500 whitespace-nowrap" title="decreased position">
                            <i class="fas fa-chevron-down pl-1"></i> @Math.Abs(data.Change.Value)
                        </td>
                    }
                    <td class="table-channel-col">
                        <a href="/@data.LoginName/@((int)Model.Type)">@data.DisplayName</a>
                    </td>
                    <td class="table-stats-col">@(((double)data.Shared / Model.ChannelTotalOverlap).ToString("P", numberInfo))</td>
                    <td class="table-stats-col">@(data.Shared.ToString("N0"))</td>
                    <td class="table-stats-col">@(((double)data.Shared / Model.ChannelTotalUnique).ToString("P", numberInfo))</td>
                    <td class="table-stats-col hover:underline hover:text-pink-500 truncate">
                        <a href="https://www.twitch.tv/directory/game/@data.Game" target="_blank" rel="noopener noreferrer">@data.Game</a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<script src="~/js/channel.js" asp-append-version="true"></script>